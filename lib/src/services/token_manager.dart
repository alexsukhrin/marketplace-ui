import 'dart:async';
import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:http/http.dart' as http;
import 'auth_storage.dart';
import '../config/api_config.dart';

class TokenManager {
  static TokenManager? _instance;
  static TokenManager get instance => _instance ??= TokenManager._();
  
  TokenManager._();
  
  Timer? _refreshTimer;
  bool _isRefreshing = false;
  
  /// –ó–∞–ø—É—Å–∫–∞—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –∫–æ–∂–Ω—ñ 14 —Ö–≤–∏–ª–∏–Ω
  void startAutoRefresh() {
    stopAutoRefresh(); // –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä
    
    _refreshTimer = Timer.periodic(
      const Duration(minutes: 14), // –ó–∞ 1 —Ö–≤–∏–ª–∏–Ω—É –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è
      (timer) async {
        await _refreshTokenIfNeeded();
      },
    );
    
    if (kDebugMode) {
      print('üîÑ TokenManager: Auto-refresh –∑–∞–ø—É—â–µ–Ω–æ (–∫–æ–∂–Ω—ñ 14 —Ö–≤)');
    }
  }
  
  /// –ó—É–ø–∏–Ω—è—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
  void stopAutoRefresh() {
    _refreshTimer?.cancel();
    _refreshTimer = null;
  }
  
  /// –û—Ç—Ä–∏–º—É—î –≤–∞–ª—ñ–¥–Ω–∏–π access token, –æ–Ω–æ–≤–ª—é—é—á–∏ –π–æ–≥–æ –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ
  Future<String?> getValidAccessToken() async {
    final accessToken = await AuthStorage.getAccessToken();
    
    if (accessToken == null) {
      if (kDebugMode) {
        print('‚ö†Ô∏è TokenManager: Access token –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      }
      return null;
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó —Ç–æ–∫–µ–Ω–∞
    if (_isTokenExpiringSoon(accessToken)) {
      if (kDebugMode) {
        print('‚è∞ TokenManager: Access token –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è, –æ–Ω–æ–≤–ª—é—î–º–æ...');
      }
      return await _refreshTokenIfNeeded();
    }
    
    return accessToken;
  }
  
  /// –û–Ω–æ–≤–ª—é—î access token –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ refresh token
  Future<String?> _refreshTokenIfNeeded() async {
    if (_isRefreshing) {
      if (kDebugMode) {
        print('üîÑ TokenManager: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ, —á–µ–∫–∞—î–º–æ...');
      }
      // –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
      while (_isRefreshing) {
        await Future.delayed(const Duration(milliseconds: 100));
      }
      return await AuthStorage.getAccessToken();
    }
    
    _isRefreshing = true;
    
    try {
      final refreshToken = await AuthStorage.getRefreshToken();
      
      if (refreshToken == null) {
        if (kDebugMode) {
          print('‚ùå TokenManager: Refresh token –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
        }
        return null;
      }
      
      final response = await http.post(
        Uri.parse(ApiConfig.authRefresh),
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Authorization': 'Bearer $refreshToken',
        },
      );
      
      if (response.statusCode == 200) {
        final responseData = jsonDecode(response.body);
        
        final newAccessToken = responseData['access'];
        final newRefreshToken = responseData['refresh'];
        
        if (newAccessToken != null) {
          await AuthStorage.saveAccessToken(newAccessToken);
          if (kDebugMode) {
            print('‚úÖ TokenManager: Access token –æ–Ω–æ–≤–ª–µ–Ω–æ');
          }
        }
        
        if (newRefreshToken != null) {
          await AuthStorage.saveRefreshToken(newRefreshToken);
          if (kDebugMode) {
            print('‚úÖ TokenManager: Refresh token –æ–Ω–æ–≤–ª–µ–Ω–æ');
          }
        }
        
        return newAccessToken;
      } else {
        if (kDebugMode) {
          print('‚ùå TokenManager: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞: ${response.statusCode}');
        }
        
        // –Ø–∫—â–æ refresh token –Ω–µ –≤–∞–ª—ñ–¥–Ω–∏–π, –æ—á–∏—â–∞—î–º–æ –≤—Å–µ
        if (response.statusCode == 401) {
          await clearTokens();
        }
        
        return null;
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå TokenManager: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ç–æ–∫–µ–Ω–∞: $e');
      }
      return null;
    } finally {
      _isRefreshing = false;
    }
  }
  
  /// –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó —Ç–æ–∫–µ–Ω–∞ –Ω–µ–∑–∞–±–∞—Ä–æ–º (–∑–∞ 2 —Ö–≤–∏–ª–∏–Ω–∏)
  bool _isTokenExpiringSoon(String token) {
    try {
      // –ü—Ä–æ—Å—Ç–∏–π –ø–∞—Ä—Å–∏–Ω–≥ JWT –±–µ–∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø—ñ–¥–ø–∏—Å—É
      final parts = token.split('.');
      if (parts.length != 3) return true;
      
      final payload = parts[1];
      // –î–æ–¥–∞—î–º–æ padding —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
      final normalizedPayload = payload.padRight(
        payload.length + (4 - payload.length % 4) % 4, 
        '='
      );
      
      final decoded = utf8.decode(base64Url.decode(normalizedPayload));
      final payloadData = jsonDecode(decoded);
      
      final exp = payloadData['exp'];
      if (exp == null) return true;
      
      final expirationTime = DateTime.fromMillisecondsSinceEpoch(exp * 1000);
      final now = DateTime.now();
      final timeUntilExpiration = expirationTime.difference(now);
      
      // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω –∑–∞ 2 —Ö–≤–∏–ª–∏–Ω–∏ –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è
      return timeUntilExpiration.inMinutes <= 2;
    } catch (e) {
      if (kDebugMode) {
        print('‚ö†Ô∏è TokenManager: –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —Ç–æ–∫–µ–Ω–∞: $e');
      }
      return true; // –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏, –∫—Ä–∞—â–µ –æ–Ω–æ–≤–∏—Ç–∏
    }
  }
  
  /// –û—á–∏—â–∞—î –≤—Å—ñ —Ç–æ–∫–µ–Ω–∏ (logout)
  Future<void> clearTokens() async {
    stopAutoRefresh();
    await AuthStorage.clearTokens();
    if (kDebugMode) {
      print('üóëÔ∏è TokenManager: –£—Å—ñ —Ç–æ–∫–µ–Ω–∏ –æ—á–∏—â–µ–Ω–æ');
    }
  }
  
  /// –ó–±–µ—Ä—ñ–≥–∞—î –Ω–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏ –ø—ñ—Å–ª—è –ª–æ–≥—ñ–Ω—É/—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
  Future<void> setTokens({
    required String accessToken,
    required String refreshToken,
  }) async {
    await AuthStorage.saveAccessToken(accessToken);
    await AuthStorage.saveRefreshToken(refreshToken);
    startAutoRefresh(); // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    
    if (kDebugMode) {
      print('üíæ TokenManager: –¢–æ–∫–µ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ, auto-refresh –∑–∞–ø—É—â–µ–Ω–æ');
    }
  }
}

/// –£—Ç—ñ–ª—ñ—Ç–∞ –¥–ª—è HTTP –∑–∞–ø–∏—Ç—ñ–≤ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º Authorization header
class AuthenticatedHttpClient {
  static Future<http.Response> get(
    Uri url, {
    Map<String, String>? headers,
  }) async {
    final authHeaders = await _getAuthHeaders();
    final finalHeaders = {...?headers, ...authHeaders};
    
    return await http.get(url, headers: finalHeaders);
  }
  
  static Future<http.Response> post(
    Uri url, {
    Map<String, String>? headers,
    Object? body,
  }) async {
    final authHeaders = await _getAuthHeaders();
    final finalHeaders = {...?headers, ...authHeaders};
    
    return await http.post(url, headers: finalHeaders, body: body);
  }
  
  static Future<http.Response> put(
    Uri url, {
    Map<String, String>? headers,
    Object? body,
  }) async {
    final authHeaders = await _getAuthHeaders();
    final finalHeaders = {...?headers, ...authHeaders};
    
    return await http.put(url, headers: finalHeaders, body: body);
  }
  
  static Future<http.Response> delete(
    Uri url, {
    Map<String, String>? headers,
  }) async {
    final authHeaders = await _getAuthHeaders();
    final finalHeaders = {...?headers, ...authHeaders};
    
    return await http.delete(url, headers: finalHeaders);
  }
  
  static Future<Map<String, String>> _getAuthHeaders() async {
    final token = await TokenManager.instance.getValidAccessToken();
    
    final headers = {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
    };
    
    if (token != null) {
      headers['Authorization'] = 'Bearer $token';
    }
    
    return headers;
  }
} 